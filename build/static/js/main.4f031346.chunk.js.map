{"version":3,"sources":["serviceWorker.ts","modules/engine/models/Entity.ts","util/arrays.ts","modules/geo2d/core.ts","modules/geo2d/navMesh2d.ts","modules/create-slice/index.ts","modules/engine/models/Camera.ts","modules/engine/duck/index.ts","xhess/duck/index.ts","root.ts","xhess/sprites/Token.tsx","xhess/sprites/Box.tsx","xhess/scenes/main/MainScene.tsx","xhess/sprites/NavigableArea.tsx","xhess/sprites/Scissors.tsx","modules/engine/components/SvgDebug.tsx","modules/engine/components/SvgRenderer.tsx","xhess/Xhess.tsx","modules/use-animation-frame/useAnimationFrame.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","FacetType","isFacetType","t","facet","type","times","n","fn","arr","i","push","removeFirst","haystack","needle","replacement","index","indexOf","clone","splice","TAU","Math","PI","isSameVector2","x1","y1","x2","y2","addVector2","scaleVector2","v2","scale","map","rotatePoint","theta","x","y","cos","sin","getDistance","sqrt","pow","getAngleBetweenPoints","atan2","line","p1","p2","isInsideOrSameAngle","angle","thetaA","thetaB","isValidLink","candidateLink","edges","allowNonOptimalPaths","every","possibleCollision","intersection","x0","y0","sx1","sy1","sx2","sy2","s","getIntersection","intersectedCorner","corners","find","c","p","thetaAOpposite","thetaBOpposite","angleOpposite","findNavMeshLinks","shapeEdges","links","linkableEdges","otherHoles","h","e","filter","edge","otherHole","robustPointInPolygon","flat","allEdges","remainingEdges","pop","otherEdges","forEach","remainingEdge","getPath","navMesh","start","end","g","createGraph","forEachNode","node","addNode","id","data","forEachLink","link","addLink","fromId","toId","cloneMesh","startId","join","endId","canLinkStartToEnd","startLink","endLink","aStar","distance","_from","_to","reverse","slice","createSlice","initialState","prefix","handlerMap","configureAction","reduce","prefixedType","payload","reducer","state","action","handler","update","updates","emptyCamera","position","width","height","camera","entities","engineReducer","updateEngine","tick","elapsed","entity","agent","facets","NavMeshAgent","path","wayPoint","restOfPath","d","velocity","movement","newPosition","rotation","getNavMeshHoles","createSelector","holes","holeShapes","NavMeshHole","f","shape","getNavMeshGraph","engineState","graph","p1Id","p2Id","getNavMesh2d","selected","teams","playerTeam","xhessReducer","updateXhess","rootReducer","combineReducers","engine","xhess","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootStore","createStore","useRootState","useStore","getState","Token","useSelector","children","dispatch","useDispatch","team","includes","color","transform","useMemo","size","fill","onClick","name","Box","stroke","strokeWidth","initialEntities","SvgSprite","Component","currentTarget","getBoundingClientRect","left","top","destination","clientX","clientY","navMeshGraph","props","r","segments","regularPolygon","MainScene","useEffect","shapes","a","length","b","DebugGrid","numLatitudes","floor","numLongitudes","key","DebugNavMesh","Fragment","cx","cy","points","DebugPaths","pathLines","SvgDebug","showGrid","showNavMesh","showPaths","SvgRenderer","cameraTransform","viewBox","style","border","debug","svgSprite","Renderer","callback","useState","forceUpdate","lastTime","requestAnimationFrame","onAnimationFrame","time","cancelAnimationFrame","useAnimationFrame","useCallback","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f031346.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Vector2, Shape2 } from 'modules/geo2d/core';\n\nexport enum FacetType {\n  Collider,\n  SvgSprite,\n  NavMeshAgent,\n  NavMeshHole,\n}\n\nexport interface FacetBase {\n  type: FacetType;\n}\n\nexport interface ColliderFacet extends FacetBase {\n  type: FacetType.Collider;\n  size: Vector2;\n}\n\nexport interface EntityComponentProps { facet: SvgSpriteFacet; entity: Entity }\n\nexport interface SvgSpriteFacet extends FacetBase {\n  type: FacetType.SvgSprite;\n  size: Vector2;\n  Component: React.ComponentType<EntityComponentProps>;\n}\n\nexport interface NavMeshAgentFacet extends FacetBase {\n  type: FacetType.NavMeshAgent;\n  path: Vector2[];\n  velocity: number;\n}\n\nexport interface NavMeshHoleFacet extends FacetBase {\n  type: FacetType.NavMeshHole;\n  shape: Shape2;\n}\n\nexport type FacetMap = {\n  [FacetType.Collider]: ColliderFacet;\n  [FacetType.SvgSprite]: SvgSpriteFacet;\n  [FacetType.NavMeshAgent]: NavMeshAgentFacet;\n  [FacetType.NavMeshHole]: NavMeshHoleFacet;\n}\n\ntype ValueOf<T> = T[keyof T];\nexport type Facet = ValueOf<FacetMap>;\n\nexport const isFacetType = <T extends FacetType>(t: T) => (facet: Facet): facet is FacetMap[T] => {\n  return facet.type === t;\n};\n\nexport interface Entity {\n  id: string;\n  position: Vector2;\n  rotation: number;\n  facets: Facet[];\n}\n","\nexport const times = <T>(n: number, fn: (i: number) => T): T[] => {\n  const arr: T[] = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(fn(i));\n  }\n  return arr;\n};\n\nexport const removeFirst = <T>(haystack: T[], needle: T, replacement?: T): T[] => {\n  const index = haystack.indexOf(needle);\n  if (index === -1) {\n    return haystack;\n  }\n  const clone = [ ...haystack ];\n  if (replacement) {\n    clone.splice(index, 1, replacement);\n  } else {\n    clone.splice(index, 1);\n  }\n  return clone;\n};\n","import { times } from 'util/arrays';\n\nexport type Vector2 = [number, number];\nexport type Line2 = [Vector2, Vector2];\nexport type Shape2 = Vector2[];\n\nexport const TAU = Math.PI * 2;\n\nexport const isSameVector2 = ([ x1, y1 ]: Vector2, [ x2, y2 ]: Vector2): boolean => {\n  return x1 === x2 && y1 === y2;\n};\n\nexport const addVector2 = ([ x1, y1 ]: Vector2, [ x2, y2 ]: Vector2): Vector2 => {\n  return [ x1 + x2, y1 + y2 ];\n};\n\nexport const scaleVector2 = (v2: Vector2, scale: number) => v2.map(n => n * scale) as Vector2;\n\nexport const rotatePoint = ([ x, y ]: Vector2, theta: number): Vector2 => {\n  return [\n    x * Math.cos(theta) - y * Math.sin(theta),\n    x * Math.sin(theta) + y * Math.cos(theta),\n  ];\n};\n\nexport const regularPolygon = (r: number, segments: number): Shape2 => {\n  const theta = TAU / segments;\n  return times(segments, n => rotatePoint([ r, 0 ], n * theta));\n};\n\nexport const getDistance = ([x1, y1]: Vector2, [x2, y2]: Vector2): number => {\n  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n};\n\nexport const getAngleBetweenPoints = ([x1, y1]: Vector2, [x2, y2]: Vector2): number => {\n  return ((Math.atan2(y2 - y1, x2 - x1) + TAU) % TAU) * 180 / Math.PI;\n};\n\nexport const getIntersection = (\n  [ [ x0, y0 ], [ x1, y1 ] ]: Line2,\n  [ [ x2, y2 ], [ x3, y3 ] ]: Line2,\n): Vector2 | null => {\n  const sx1 = x1 - x0;\n  const sy1 = y1 - y0;\n  const sx2 = x3 - x2;\n  const sy2 = y3 - y2;\n\n  const s = (-sy1 * (x0 - x2) + sx1 * (y0 - y2)) / (-sx2 * sy1 + sx1 * sy2);\n  const t = ( sx2 * (y0 - y2) - sy2 * (x0 - x2)) / (-sx2 * sy1 + sx1 * sy2);\n\n  if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\n    return [ x0 + (t * sx1), y0 + (t * sy1) ];\n  }\n\n  return null;\n};\n\nexport const line = (p1: Vector2, p2: Vector2): Line2 => [ p1, p2 ];\n\nexport const toLines = (shape: Shape2): Line2[] => {\n  return shape.map((p, i) => line(p, shape[(i + 1) % shape.length]));\n};\n","import { getAngleBetweenPoints, Vector2, Line2, Shape2, getIntersection, getDistance, isSameVector2, line } from './core';\nimport createGraph, { Graph } from 'ngraph.graph';\nimport { aStar } from 'ngraph.path';\nimport { removeFirst } from 'util/arrays';\nimport robustPointInPolygon from 'robust-point-in-polygon';\n\nexport const isInsideOrSameAngle = (angle: number, thetaA: number, thetaB: number) => {\n  if (thetaA < thetaB) {\n    return angle >= thetaA && angle <= thetaB;\n  }\n  return angle >= thetaA || angle <= thetaB;\n};\n\nexport interface Edge {\n  line: Line2;\n  angle: number;\n  angleOpposite: number;\n  corners: [ Corner, Corner ];\n}\n\nexport interface Corner {\n  p: Vector2;\n  thetaA: number;\n  thetaAOpposite: number;\n  thetaB: number;\n  thetaBOpposite: number;\n}\n\nexport const getEdges = (shapes: Shape2[]): Edge[][] => {\n  const shapeEdges = shapes.map(shape => {\n    return shape.map((v2, i) => {\n      const a = shape[(i - 1 + shape.length) % shape.length];\n      const b = shape[(i + 1) % shape.length];\n      const c = shape[(i + 2) % shape.length];\n      const line: Line2 = [ v2, b ];\n      const angle = getAngleBetweenPoints(...line);\n      const angleOpposite = (angle + 180) % 360;\n      const edge: Edge = {\n        line,\n        angle,\n        angleOpposite,\n        corners: [\n          {\n            p: v2,\n            thetaA: getAngleBetweenPoints(a, v2),\n            thetaAOpposite: getAngleBetweenPoints(v2, a),\n            thetaB: angle,\n            thetaBOpposite: angleOpposite,\n          },\n          {\n            p: b,\n            thetaA: angle,\n            thetaAOpposite: angleOpposite,\n            thetaB: getAngleBetweenPoints(b, c),\n            thetaBOpposite: getAngleBetweenPoints(c, b),\n          },\n        ],\n      };\n      return edge;\n    });\n  });\n  return shapeEdges;\n};\n\nconst isValidLink = (candidateLink: Line2, edges: Edge[], allowNonOptimalPaths?: boolean): boolean => {\n  const angle = getAngleBetweenPoints(...candidateLink);\n  return edges.every(possibleCollision => {\n    const intersection = getIntersection(candidateLink, possibleCollision.line);\n    if (!intersection) {\n      return true;\n    }\n    if (!isSameVector2(intersection, candidateLink[0]) && !isSameVector2(intersection, candidateLink[1])) {\n      return false;\n    }\n    const intersectedCorner = possibleCollision.corners.find(c => isSameVector2(c.p, intersection));\n    if (!intersectedCorner) {\n      return isSameVector2(intersection, candidateLink[1])\n        || isInsideOrSameAngle(angle, possibleCollision.angleOpposite, possibleCollision.angle);\n    }\n    if (allowNonOptimalPaths) {\n      if (isSameVector2(intersection, candidateLink[0])) {\n        return isInsideOrSameAngle(angle, intersectedCorner.thetaAOpposite, intersectedCorner.thetaB);\n      }\n      return isInsideOrSameAngle(angle, intersectedCorner.thetaA, intersectedCorner.thetaBOpposite);\n    }\n    return isInsideOrSameAngle(angle, intersectedCorner.thetaA, intersectedCorner.thetaB)\n      || isInsideOrSameAngle(angle, intersectedCorner.thetaAOpposite, intersectedCorner.thetaBOpposite);\n  });\n};\n\nexport const findNavMeshLinks = (shapeEdges: Edge[][]): Line2[] => {\n  const links: Line2[] = [];\n  const linkableEdges = shapeEdges.map(edges => {\n    const otherHoles = removeFirst(shapeEdges, edges).map(h => h.map(e => e.line[0]));\n    return edges.filter(edge => {\n      return otherHoles.every(otherHole => robustPointInPolygon(otherHole, edge.line[0]) !== -1);\n    });\n  }).flat();\n  const allEdges = shapeEdges.flat();\n  const remainingEdges = [ ...linkableEdges ];\n  while (true) {\n    const edge = remainingEdges.pop();\n    if (!edge) { break; }\n    const otherEdges = removeFirst(allEdges, edge);\n    remainingEdges.forEach(remainingEdge => {\n      const candidateLink: Line2 = [ edge.line[0], remainingEdge.line[0] ];\n      if (isValidLink(candidateLink, otherEdges)) {\n        links.push(candidateLink);\n      }\n    });\n  }\n  return links;\n};\n\nexport const getNavMesh2d = (shapeEdges: Edge[][]): Graph<Vector2, number> => {\n  const graph = createGraph<Vector2, number>();\n  const links = findNavMeshLinks(shapeEdges);\n  links.forEach(([ p1, p2 ]) => {\n    const p1Id = p1.join();\n    const p2Id = p2.join();\n    graph.addNode(p1Id, p1);\n    graph.addNode(p2Id, p2);\n    graph.addLink(p2Id, p1Id, getDistance(p1, p2));\n  });\n\n  return graph;\n};\n\nconst cloneMesh = (navMesh: Graph<Vector2, number>) => {\n  const g = createGraph<Vector2, number>();\n  navMesh.forEachNode(node => { g.addNode(node.id, node.data); });\n  navMesh.forEachLink(link => { g.addLink(link.fromId, link.toId, link.data); });\n  return g;\n};\n\nexport const getPath = (navMesh: Graph<Vector2, number>, edges: Edge[], start: Vector2, end: Vector2) => {\n  const clone = cloneMesh(navMesh);\n  const startId = start.join();\n  const endId = end.join();\n  const startToEnd: Line2 = [ start, end ];\n  const canLinkStartToEnd = isValidLink(startToEnd, edges, true);\n\n  clone.addNode(startId, start);\n  clone.addNode(endId, end);\n  if (canLinkStartToEnd) {\n    clone.addLink(startId, endId, getDistance(start, end));\n  }\n\n  edges.forEach(edge => {\n    const otherEdges = removeFirst(edges, edge);\n    const p = edge.line[0];\n    const startLink = line(start, p);\n    const endLink = line(p, end);\n    if (isValidLink(startLink, otherEdges, true)) {\n      clone.addLink(startId, p.join(), getDistance(start, p));\n    }\n    if (isValidLink(endLink, otherEdges, true)) {\n      clone.addLink(p.join(), endId, getDistance(p, end));\n    }\n  });\n\n  const pathfinder = aStar(clone, { distance: (_from, _to, link) => link.data });\n  return pathfinder.find(startId, endId).map(n => n.data).reverse().slice(1);\n};\n","import { Reducer } from 'redux';\n\nexport interface FSA<TPayload, TMeta = {}> {\n    type: string;\n    payload: TPayload;\n    error?: boolean;\n    meta?: TMeta;\n}\n\nexport type FSACreator<TPayload> = (payload: TPayload) => FSA<TPayload>;\n\nexport interface Slice<S> {\n\n    reducer: Reducer<S>;\n\n    configureAction: <P>(\n        type: string,\n        reduce: (payload: P) => (state: S) => S,\n    ) => FSACreator<P>;\n\n    update: <K extends keyof S>(updates: Pick<S, K>) => FSA<Pick<S, K>>;\n}\n\nexport const createSlice = <S>(initialState: S, prefix: string): Slice<S> => {\n    // tslint:disable-next-line no-any\n    const handlerMap: Record<string, (payload: any) => (state: S) => S> = {};\n\n    const configureAction: Slice<S>['configureAction'] = (type, reduce) => {\n        const prefixedType = `${prefix}/${type}`;\n        handlerMap[prefixedType] = reduce;\n        return payload => ({ type: prefixedType, payload });\n    };\n\n    const slice: Slice<S> = {\n        configureAction,\n        reducer: (state = initialState, action) => {\n            const handler = handlerMap[action.type];\n            if (handler) {\n                return handler(action.payload)(state);\n            }\n            return state;\n        },\n        update: configureAction('UPDATE', updates => state => ({ ...state, ...updates })),\n    };\n\n    return slice;\n};\n","import { Vector2 } from 'modules/geo2d/core';\n\nexport interface Camera {\n  position: Vector2;\n  scale: number;\n}\n\nexport const emptyCamera: Camera = { position: [ 0, 0 ], scale: 1 };\n","import { createSelector } from 'reselect';\n\nimport { Shape2, addVector2, Vector2, getDistance, rotatePoint } from 'modules/geo2d/core';\nimport { getNavMesh2d, Edge } from 'modules/geo2d/navMesh2d';\nimport { createSlice } from 'modules/create-slice';\n\nimport { Camera, emptyCamera } from '../models/Camera';\nimport { Entity, isFacetType, FacetType } from '../models/Entity';\nimport { removeFirst } from 'util/arrays';\n\nexport interface EngineState {\n  width: number;\n  height: number;\n  camera: Camera;\n  entities: Entity[];\n  navMesh: Edge[][];\n}\n\nconst initialEngineState: EngineState = {\n  width: 0,\n  height: 0,\n  camera: emptyCamera,\n  entities: [],\n  navMesh: [],\n};\n\nconst { reducer, update, configureAction } = createSlice(initialEngineState, 'ENGINE');\n\nexport const engineReducer = reducer;\nexport const updateEngine = update;\n\nexport const tick = configureAction<number>(\n  'TICK',\n  elapsed => state => {\n    const entities = state.entities.map(entity => {\n      const agent = entity.facets.find(isFacetType(FacetType.NavMeshAgent));\n      if (!agent) {\n        return entity;\n      }\n      const [ wayPoint, ...restOfPath ] = agent.path;\n      if (!wayPoint) {\n        return entity;\n      }\n      const [ x1, y1 ] = entity.position;\n      const [ x2, y2 ] = wayPoint;\n      const d = agent.velocity * (elapsed / 1000);\n      const distanceToWayPoint = getDistance(entity.position, wayPoint);\n      if (distanceToWayPoint <= d) {\n        const facets = removeFirst(entity.facets, agent, { ...agent, path: restOfPath });\n        return { ...entity, position: wayPoint, facets };\n      }\n      const angle = Math.atan2(y2 - y1, x2 - x1);\n      const movement: Vector2 = [ Math.cos(angle) * d, Math.sin(angle) * d ];\n      const newPosition = addVector2(entity.position, movement);\n      return { ...entity, rotation: angle + Math.PI / 2, position: newPosition };\n    });\n    return { ...state, entities };\n  },\n);\n\nexport const getNavMeshHoles = createSelector(\n  (entities: Entity[]) => entities,\n  entities => {\n    const holes: Shape2[] = [];\n    entities.forEach(entity => {\n      const holeFacets = entity.facets.filter(isFacetType(FacetType.NavMeshHole));\n      const holeShapes = holeFacets.map(f => f.shape.map(v2 => addVector2(rotatePoint(v2, entity.rotation), entity.position)));\n      holes.push(...holeShapes);\n    });\n    return holes;\n  },\n);\n\nexport const getNavMeshGraph = createSelector(\n  (engineState: EngineState) => engineState.navMesh,\n  navMesh => getNavMesh2d(navMesh),\n);\n","import { createSlice } from 'modules/create-slice';\n\ninterface Team {\n  name: string;\n  entities: string[];\n  color: string;\n}\n\ninterface XhessState {\n  selected: string[];\n  teams: Team[];\n  playerTeam: string;\n}\n\nconst initialXhessState: XhessState = {\n  selected: [ 'player_scissors' ],\n  teams: [],\n  playerTeam: 'blue',\n};\n\nconst { reducer, update } = createSlice(initialXhessState, 'XHESS');\nexport const xhessReducer = reducer;\nexport const updateXhess = update;\n","import { combineReducers, createStore, Reducer, CombinedState, compose } from 'redux';\nimport { useStore, TypedUseSelectorHook, useSelector } from 'react-redux';\n\nimport { engineReducer } from 'modules/engine/duck';\nimport { xhessReducer } from 'xhess/duck';\n\nexport const rootReducer = combineReducers({\n  engine: engineReducer,\n  xhess: xhessReducer,\n});\n\ntype ExtractState<TReducer> = TReducer extends Reducer<CombinedState<infer S>, any> ? S : never;\nexport type RootState = ExtractState<typeof rootReducer>;\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const rootStore = createStore(rootReducer, composeEnhancers());\n\nexport const useRootState = (): RootState => {\n  const store = useStore<RootState>();\n  return store.getState();\n};\n\nexport const useRootSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useMemo } from 'react';\nimport { EntityComponentProps } from 'modules/engine/models/Entity';\nimport { scaleVector2 } from 'modules/geo2d/core';\nimport { useDispatch } from 'react-redux';\nimport { useRootState } from 'root';\nimport { updateXhess } from 'xhess/duck';\n\nconst originalSize = 512;\n\nexport const Token: React.FC<EntityComponentProps> = ({ facet, entity, children }) => {\n  const dispatch = useDispatch();\n  const { xhess } = useRootState();\n  // const isSelected = xhess.selected.includes(entity.id);\n  const team = xhess.teams.find(team => team.entities.includes(entity.id));\n  const color = team ? team.color : 'grey';\n  // const strokeWidth = (isSelected) ? 2 : 1;\n  const onClick = () => {\n    if (!team || team.name !== xhess.playerTeam) {\n      return;\n    }\n    dispatch(updateXhess({\n      // selected: isSelected ? [] : [ entity.id ],\n    }));\n  };\n  const transform = useMemo(() => {\n    return [\n      `translate(${scaleVector2(facet.size, -0.5).join(' ')})`,\n      `scale(${scaleVector2(facet.size, 1 / originalSize).join(' ')})`\n    ].join(' ');\n  }, [ facet.size ]);\n\n  return (\n    <g\n      transform={transform}\n      fill={color}\n      // stroke={color}\n      // strokeWidth={strokeWidth * engine.camera.scale}\n      onClick={onClick}\n    >\n      {children}\n    </g>\n  );\n};\n","import React from 'react';\n\nimport { EntityComponentProps } from 'modules/engine/models/Entity';\nimport { useRootState } from 'root';\n\nexport const Box: React.FC<EntityComponentProps> = ({ facet }) => {\n  const { engine } = useRootState();\n\n  return (\n    <rect\n      width={facet.size[0]}\n      height={facet.size[1]}\n      stroke=\"black\"\n      strokeWidth={3 / engine.camera.scale}\n      fill=\"rgba(0, 0, 0, 0.2)\"\n    />\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { FacetType, Entity } from 'modules/engine/models/Entity';\nimport { updateEngine, getNavMeshHoles } from 'modules/engine/duck';\n// import { Rock } from 'xhess/sprites/Rock';\n// import { Paper } from 'xhess/sprites/Paper';\nimport { Scissors } from 'xhess/sprites/Scissors';\nimport { Box } from 'xhess/sprites/Box';\nimport { NavigableArea } from 'xhess/sprites/NavigableArea';\nimport { updateXhess } from 'xhess/duck';\nimport { getEdges } from 'modules/geo2d/navMesh2d';\nimport { regularPolygon } from 'modules/geo2d/core';\n\nconst initialEntities: Entity[] = [\n  {\n    id: 'navigable_area',\n    position: [ 0, 0 ],\n    rotation: 0,\n    facets: [\n      { type: FacetType.SvgSprite, size: [ 0, 0 ], Component: NavigableArea },\n    ],\n  },\n  // {\n  //   id: 'player_rock',\n  //   position: [ 14, 16 ],\n  //   rotation: 0,\n  //   facets: [\n  //     { type: FacetType.SvgSprite, size: [ 1, 1 ], Component: Rock },\n  //     { type: FacetType.NavMeshAgent, path: [], velocity: 3 },\n  //   ],\n  // },\n  // {\n  //   id: 'player_paper',\n  //   position: [ 16, 16 ],\n  //   rotation: 0,\n  //   facets: [\n  //     { type: FacetType.SvgSprite, size: [ 1, 1 ], Component: Paper },\n  //     { type: FacetType.NavMeshAgent, path: [], velocity: 6 },\n  //   ],\n  // },\n  {\n    id: 'player_scissors',\n    position: [ 2.5, 1.5 ],\n    rotation: 0,\n    facets: [\n      { type: FacetType.SvgSprite, size: [ 1, 1 ], Component: Scissors },\n      { type: FacetType.NavMeshAgent, path: [], velocity: 9 },\n    ],\n  },\n  // {\n  //   id: 'enemy_rock',\n  //   position: [ 14, 2 ],\n  //   rotation: 0,\n  //   facets: [\n  //     { type: FacetType.SvgSprite, size: [ 1, 1 ], Component: Rock },\n  //     { type: FacetType.NavMeshAgent, path: [], velocity: 3 },\n  //   ],\n  // },\n  // {\n  //   id: 'enemy_paper',\n  //   position: [ 16, 2 ],\n  //   rotation: 0,\n  //   facets: [\n  //     { type: FacetType.SvgSprite, size: [ 1, 1 ], Component: Paper },\n  //     { type: FacetType.NavMeshAgent, path: [], velocity: 6 },\n  //   ],\n  // },\n  // {\n  //   id: 'enemy_scissors',\n  //   position: [ 18, 2 ],\n  //   rotation: 0,\n  //   facets: [\n  //     { type: FacetType.SvgSprite, size: [ 1, 1 ], Component: Scissors },\n  //     { type: FacetType.NavMeshAgent, path: [], velocity: 12 },\n  //   ],\n  // },\n  {\n    id: 'box1',\n    position: [ 2, 2 ],\n    rotation: Math.PI / 16,\n    facets: [\n      { type: FacetType.SvgSprite, size: [ 7, 1 ], Component: Box },\n      {\n        type: FacetType.NavMeshHole,\n        shape: [ [ -0.5, -0.5 ], [ 7.5, -0.5 ], [ 7.5, 1.5 ], [ -0.5, 1.5 ] ],\n      },\n    ],\n  },\n  {\n    id: 'box2',\n    position: [ 4, 11 ],\n    rotation: -Math.PI / 4,\n    facets: [\n      { type: FacetType.SvgSprite, size: [ 7, 1 ], Component: Box },\n      {\n        type: FacetType.NavMeshHole,\n        shape: [ [ -0.5, -0.5 ], [ 7.5, -0.5 ], [ 7.5, 1.5 ], [ -0.5, 1.5 ] ],\n      },\n    ],\n  },\n  {\n    id: 'ring',\n    position: [ 5, 5 ],\n    rotation: 0,\n    facets: [\n      {\n        type: FacetType.SvgSprite,\n        size: [ 1, 1 ],\n        Component: () => <circle r={2} />\n      },\n      { type: FacetType.NavMeshHole, shape: regularPolygon(2.5, 16) },\n    ],\n  },\n  // {\n  //   id: 'box2',\n  //   position: [ 2, 3 ],\n  //   rotation: 0,\n  //   facets: [\n  //     { type: FacetType.SvgSprite, size: [ 1, 4 ], Component: Box },\n  //     {\n  //       type: FacetType.NavMeshHole,\n  //       shape: [ [ -0.5, -0.5 ], [ 1.5, -0.5 ], [ 1.5, 4.5 ], [ -0.5, 4.5 ] ],\n  //     },\n  //   ],\n  // },\n  // {\n  //   id: 'box3',\n  //   position: [ 4, 3 ],\n  //   rotation: 0,\n  //   facets: [\n  //     { type: FacetType.SvgSprite, size: [ 1, 5 ], Component: Box },\n  //     {\n  //       type: FacetType.NavMeshHole,\n  //       shape: [ [ -0.5, -0.5 ], [ 1.5, -0.5 ], [ 1.5, 5.5 ], [ -0.5, 5.5 ] ],\n  //     },\n  //   ],\n  // },\n  // {\n  //   id: 'box4',\n  //   position: [ 5, 6 ],\n  //   rotation: 0,\n  //   facets: [\n  //     { type: FacetType.SvgSprite, size: [ 1, 1 ], Component: Box },\n  //     {\n  //       type: FacetType.NavMeshHole,\n  //       shape: [ [ -0.5, -0.5 ], [ 1.5, -0.5 ], [ 1.5, 1.5 ], [ -0.5, 1.5 ] ],\n  //     },\n  //   ],\n  // },\n  // {\n  //   id: 'box5',\n  //   position: [ 8, 6 ],\n  //   rotation: 0,\n  //   facets: [\n  //     { type: FacetType.SvgSprite, size: [ 1, 1 ], Component: Box },\n  //     {\n  //       type: FacetType.NavMeshHole,\n  //       shape: [ [ -0.5, -0.5 ], [ 1.5, -0.5 ], [ 1.5, 1.5 ], [ -0.5, 1.5 ] ],\n  //     },\n  //   ],\n  // },\n  // {\n  //   id: 'box6',\n  //   position: [ 9, 3 ],\n  //   rotation: 0,\n  //   facets: [\n  //     { type: FacetType.SvgSprite, size: [ 1, 4 ], Component: Box },\n  //     {\n  //       type: FacetType.NavMeshHole,\n  //       shape: [ [ -0.5, -0.5 ], [ 1.5, -0.5 ], [ 1.5, 4.5 ], [ -0.5, 4.5 ] ],\n  //     },\n  //   ],\n  // },\n];\n\nexport const MainScene: React.FC = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(updateEngine({\n      entities: initialEntities,\n      navMesh: getEdges(getNavMeshHoles(initialEntities)),\n    }));\n    dispatch(updateXhess({\n      teams: [\n        {\n          name: 'blue',\n          color: 'blue',\n          entities: [ 'player_rock', 'player_paper', 'player_scissors' ],\n        },\n      ],\n    }));\n  }, [ dispatch ]);\n\n  return null;\n}\n","import React from 'react';\n\nimport { useRootState } from 'root';\nimport { scaleVector2 } from 'modules/geo2d/core';\nimport { useDispatch } from 'react-redux';\nimport { updateEngine, getNavMeshGraph } from 'modules/engine/duck';\nimport { isFacetType, FacetType } from 'modules/engine/models/Entity';\nimport { removeFirst } from 'util/arrays';\nimport { getPath } from 'modules/geo2d/navMesh2d';\n\nexport const NavigableArea: React.FC = () => {\n  const dispatch = useDispatch();\n  const { engine, xhess } = useRootState();\n  const { width, height, camera } = engine;\n  const onAreaClick = (e: React.MouseEvent<SVGRectElement>) => {\n    const { left, top } = e.currentTarget.getBoundingClientRect();\n    const destination = scaleVector2([ e.clientX - left, e.clientY - top ], 1 / camera.scale);\n    const navMeshGraph = getNavMeshGraph(engine);\n    const entities = engine.entities.map(entity => {\n      if (!xhess.selected.includes(entity.id)) {\n        return entity;\n      }\n      const facet = entity.facets.find(isFacetType(FacetType.NavMeshAgent));\n      if (!facet) {\n        return entity;\n      }\n      const path = getPath(navMeshGraph, engine.navMesh.flat(), entity.position, destination);\n      return {\n        ...entity,\n        facets: removeFirst(entity.facets, facet, { ...facet, path }),\n      };\n    });\n    dispatch(updateEngine({ entities }));\n  };\n\n  return (\n      <rect\n        width={width}\n        height={height}\n        fill=\"rgba(0, 0, 0, 0)\"\n        onClick={onAreaClick}\n      />\n  );\n};","import React from 'react';\nimport { EntityComponentProps } from 'modules/engine/models/Entity';\nimport { Token } from './Token';\n\nexport const Scissors: React.FC<EntityComponentProps> = props => {\n  return (\n    <Token {...props}>\n      <path d=\"M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm292 116V256h70.9c10.7 0 16.1-13 8.5-20.5L264.5 121.2c-4.7-4.7-12.2-4.7-16.9 0l-115 114.3c-7.6 7.6-2.2 20.5 8.5 20.5H212v116c0 6.6 5.4 12 12 12h64c6.6 0 12-5.4 12-12z\"/>\n    </Token>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { times } from 'util/arrays';\nimport { useRootState } from 'root';\nimport { findNavMeshLinks } from 'modules/geo2d/navMesh2d';\nimport { toLines } from 'modules/geo2d/core';\n\nimport { isFacetType, FacetType } from '../models/Entity';\nimport { DebugProps } from './RendererProps';\n\nconst DebugGrid: React.FC = () => {\n  const { engine } = useRootState();\n  const { scale } = engine.camera;\n  const width = engine.width / scale;\n  const height = engine.height / scale;\n  const numLatitudes = Math.floor(height);\n  const numLongitudes = Math.floor(width);\n\n  return (\n    <g stroke=\"#dddddd\">\n      {times(numLatitudes, i => (\n        <line key={i} x1={0} y1={i} x2={width} y2={i} />\n      ))}\n      {times(numLongitudes, i => (\n        <line key={i} x1={i} y1={0} x2={i} y2={height} />\n      ))}\n    </g>\n  );\n};\n\nconst DebugNavMesh: React.FC = () => {\n  const { engine } = useRootState();\n  const links = useMemo(() => findNavMeshLinks(engine.navMesh), [ engine.navMesh ]);\n\n  return (\n    <React.Fragment>\n      <g stroke=\"rgba(255, 0, 0, 0.3)\">\n        {links.map(([ [ x1, y1 ], [ x2, y2 ] ], i) => (\n          <React.Fragment key={i}>\n            <circle cx={x1} cy={y1} r={2 / engine.camera.scale} fill=\"red\" />\n            <line {...{x1, y1, x2, y2}} />\n            <circle cx={x2} cy={y2} r={2 / engine.camera.scale} fill=\"red\" />\n          </React.Fragment>\n        ))}\n      </g>\n      <g fill=\"rgba(255, 0, 0, 0.05)\">\n        {engine.navMesh.map((edges, i) => (\n          <polygon key={i} points={edges.map(edge => edge.line[0].join()).join(' ')} />\n        ))}\n      </g>\n    </React.Fragment>\n  );\n};\n\nconst DebugPaths: React.FC = () => {\n  const { engine } = useRootState();\n  const { scale } = engine.camera;\n  const paths = engine.entities.map(e => [\n    e.position,\n    ...e.facets.filter(isFacetType(FacetType.NavMeshAgent)).map(f => f.path).flat(),\n  ]);\n  const pathLines = paths.map(p => toLines(p).slice(0, -1)).flat();\n\n  return (\n    <g stroke=\"lightgreen\" strokeWidth={2 / scale}>\n      {pathLines.map(([ [ x1, y1 ], [ x2, y2 ] ], i) => (\n        <line key={i} {...{x1, y1, x2, y2}} />\n      ))}\n    </g>\n  )\n};\n\nexport const SvgDebug: React.FC<DebugProps> = props => {\n  const { engine } = useRootState();\n  const { scale } = engine.camera;\n\n  return (\n    <g strokeWidth={1 / scale}>\n      {(props.showGrid) && <DebugGrid />}\n      {(props.showNavMesh) && <DebugNavMesh />}\n      {(props.showPaths) && <DebugPaths />}\n    </g>\n  );\n};\n","import React from 'react';\n\nimport { RendererProps } from './RendererProps';\nimport { isFacetType, FacetType } from '../models/Entity';\nimport { SvgDebug } from './SvgDebug';\n\nexport const SvgRenderer: React.FC<RendererProps> = props => {\n  const { width, height, camera, entities } = props.engine;\n  const cameraTransform = [\n    `scale(${camera.scale})`,\n    `translate(${camera.position.join(' ')})`,\n  ].join(' ');\n\n  return (\n    <svg\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n      style={{ border: '1px solid black' }}\n    >\n      <g transform={cameraTransform}>\n        {props.debug && <SvgDebug {...props.debug} />}\n        {entities.map(entity => {\n          const svgSprite = entity.facets.find(isFacetType(FacetType.SvgSprite));\n          if (!svgSprite) {\n            return null;\n          }\n          return (\n            <g key={entity.id} transform={`translate(${entity.position.join(' ')}) rotate(${entity.rotation * 180 / Math.PI} 0 0)`}>\n              <svgSprite.Component facet={svgSprite} entity={entity} />\n            </g>\n          );\n        })}\n      </g>\n      {props.children}\n    </svg>\n  );\n};\n","import React, { useEffect, useCallback } from 'react';\nimport { MainScene } from './scenes/main/MainScene';\nimport { SvgRenderer } from 'modules/engine/components/SvgRenderer';\nimport { useAnimationFrame } from 'modules/use-animation-frame/useAnimationFrame';\nimport { useRootState, rootStore } from 'root';\nimport { Provider, useDispatch } from 'react-redux';\nimport { updateEngine, tick } from 'modules/engine/duck';\nimport { emptyCamera } from 'modules/engine/models/Camera';\n\nconst Renderer: React.FC = () => {\n  const dispatch = useDispatch();\n  const onAnimationFrame = useCallback((elapsed: number) => dispatch(tick(elapsed)), [ dispatch ]);\n  useAnimationFrame(onAnimationFrame);\n  const { engine } = useRootState();\n  return <SvgRenderer engine={engine} debug={{ showNavMesh: true, showPaths: true }} />;\n};\n\nexport const Xhess: React.FC = () => {\n  useEffect(() => {\n    rootStore.dispatch(updateEngine({\n      width: 800,\n      height: 450,\n      camera: { ...emptyCamera, scale: 25 },\n    }));\n  }, []);\n\n  return (\n    <Provider store={rootStore}>\n      <Renderer />\n      <MainScene />\n    </Provider>\n  );\n};\n","import { useState, useEffect } from 'react';\n\nexport const useAnimationFrame = (callback: (elapsed: number) => void) => {\n  const [ , forceUpdate ] = useState();\n  useEffect(() => {\n    let id: number;\n    let lastTime = 0;\n    const onAnimationFrame = (time: number) => {\n      callback(time - lastTime);\n      forceUpdate({});\n      lastTime = time;\n      id = requestAnimationFrame(onAnimationFrame);\n    };\n    id = requestAnimationFrame(onAnimationFrame);\n    return () => cancelAnimationFrame(id);\n  }, [ callback ]);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'index.css';\nimport * as serviceWorker from 'serviceWorker';\nimport { Xhess } from 'xhess/Xhess';\n\nReactDOM.render(<Xhess />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}